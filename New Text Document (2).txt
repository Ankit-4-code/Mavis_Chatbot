from flask import Flask, jsonify, request, send_file
from flask_cors import CORS
import openai
from dotenv import load_dotenv
import os
from datetime import datetime
import uuid
from Marivn_api import execute_function_from_gpt
from Marivn_api import FUNCTION_DESCRIPTIONS
import json
import tempfile

# Load environment variables
dotenv_path = os.path.join(os.path.dirname(__file__), '..', '.env')
load_dotenv(dotenv_path)

openai.api_key = os.getenv("OPEN_AI_KEY")

# Initialize Flask app
app = Flask(__name__)
CORS(app, resources={r"/api/*": {"origins": "http://localhost:3000"}})

# Store conversations in a dictionary
conversations = {}

# ... (keep your existing helper functions like generate_conversation_id, extract_titles, etc.)

def transcribe_audio(audio_file):
    try:
        transcript = openai.Audio.transcribe("whisper-1", audio_file)
        return transcript['text']
    except Exception as e:
        print(f"Error transcribing audio: {str(e)}")
        return None

def chat_with_gpt(conversation_id, message, is_audio=False):
    current_date = datetime.now().strftime('%Y-%m-%d')
    current_time = datetime.now().strftime('%H:%M')

    if conversation_id not in conversations:
        conversations[conversation_id] = []
    
    if is_audio:
        message = transcribe_audio(message)
        if not message:
            return {"error": "Failed to transcribe audio"}

    conversations[conversation_id].append({"role": "user", "content": message})

    # ... (keep your existing chat_with_gpt logic)

    return {
        "message": assistant_message,
        "function_call": function_call
    }

@app.route('/api/chat', methods=['POST'])
def chat_endpoint():
    data = request.get_json()
    user_message = data['message']
    conversation_id = data.get('conversation_id', generate_conversation_id())
    
    gpt_response = chat_with_gpt(conversation_id, user_message)

    return jsonify({
        "message": gpt_response,
        "conversation_id": conversation_id
    })

@app.route('/api/speech-to-text', methods=['POST'])
def speech_to_text():
    if 'file' not in request.files:
        return jsonify({"error": "No file part"}), 400
    
    file = request.files['file']
    if file.filename == '':
        return jsonify({"error": "No selected file"}), 400
    
    if file:
        conversation_id = request.form.get('conversation_id', generate_conversation_id())
        
        with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as temp_file:
            file.save(temp_file.name)
            temp_file_path = temp_file.name

        gpt_response = chat_with_gpt(conversation_id, temp_file_path, is_audio=True)
        
        os.unlink(temp_file_path)  # Delete the temporary file

        return jsonify({
            "message": gpt_response,
            "conversation_id": conversation_id
        })

@app.route('/conversations', methods=['GET'])
def get_conversations():
    return jsonify(conversations)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=9000, debug=True)
Last edited 10 minutes ago